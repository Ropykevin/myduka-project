
# 🐍 Flask Training Notes

---

## 🚀 What is Flask
- **Flask** is a *micro web framework* written in **Python**.  
- **Micro** means it’s lightweight and doesn’t include everything by default (like authentication or ORM).  
- Flask is used to build **Web Applications**, **APIs**, and **Dashboards**.

---

## ⚙️ Steps to Use Flask

### **1. Install Flask**
```bash
pip install flask
````

---

### **2. Import Flask Class**

```python
from flask import Flask
```

---

### **3. Create a Flask App**

```python
app = Flask(__name__)
```

> `app` is an instance of the Flask class.

---

### **4. Create Routes**

* A **route** connects a **URL path** to a **Python function**.
* Every route starts with a **slash (/)**.

Example:

```python
@app.route('/')
def home():
    return 'Hello, World!'
```

---

### **Routes to Create**

| Route       | Description   |
| ----------- | ------------- |
| `/`         | Homepage      |
| `/products` | Products Page |
| `/sales`    | Sales Page    |
| `/stock`    | Stock Page    |

---

### **5. Run the App**

```python
app.run()
```

---

### **Important Notes**

* Each route’s function should **return an HTML file**.
* In Flask:

  * All **HTML files** must be inside a folder called **`templates`**
  * All **CSS**, **JS**, and **images** must be inside a folder called **`static`**

Render an HTML file:

```python
from flask import render_template

@app.route('/')
def home():
    return render_template('index.html')
```

---

## 🧠 Task 1

1. Create the following HTML files inside the **`templates`** folder:

   * `index.html`
   * `products.html`
   * `sales.html`
   * `stock.html`
2. Create a **`static`** folder for CSS and JS files.
3. Render each HTML file to its respective route.

---

## 💻 GitHub Commands

Always update your GitHub repo after making changes:

```bash
git add .
git commit -m "Describe your changes"
git push origin <branch-name>
```

---

# 🧩 Flask Day 2 — Fetching and Displaying Data

---

## **1. Fetch Data**

* Import your data-fetching function into **main.py**
* Call the function inside specific routes to get data

---

## **2. Display Data Using Jinja2**

**Jinja2** is Flask’s templating engine — it allows you to write Python-like code inside HTML.

### 🧱 Syntax Basics

* Variables:

  ```html
  {{ variable }}
  ```

  *(The variable must be passed inside `render_template` in your Flask route)*

* Loops & Logic:

  ```html
  {% for item in sequence %}
      <p>{{ item }}</p>
  {% endfor %}
  ```

---

## 🧠 Task 2

1. Display **sales** and **stock** data on their pages.
2. Make all HTML files **Bootstrap enabled**.
3. Create **tables** on `products.html`, `sales.html`, and `stock.html` with random data similar to your database columns.

---

# 🧮 Flask Day 3 — Display Data in Tables

---

## **Goal**

Display fetched data inside HTML tables using **Jinja2 loops**.

Example:

```html
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Product Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        {% for product in products %}
        <tr>
            <td>{{ product.id }}</td>
            <td>{{ product.name }}</td>
            <td>{{ product.price }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
```

---

## 🧠 Task 3

1. Add a **Navbar** on each HTML page.
2. Create a **Modal Form** to add:

   * Products
   * Stock
   * Sales
3. Style your project using **Bootstrap**.
4. Make the homepage **visually appealing**.
5. Push all changes to **GitHub**.

---

✨ **Keep practicing and experimenting!**
Each day’s tasks build on the previous one — by Day 3 you’ll have a functional, styled multi-page Flask app with templates, routes, and Bootstrap integration.

```

---
```
